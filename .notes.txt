DB:
- Collecting workspace informationIn PostgreSQL, the `public` schema is the default namespace for objects such as tables, sequences, functions, etc. If a table is created without explicitly specifying a schema, it is placed in the `public` schema. Dropping and recreating the public schema (as in the query `DROP SCHEMA public CASCADE; CREATE SCHEMA public;`) removes all those objects, effectively cleaning the database for a fresh start.

- why is users_user table is like this ? "Table "public.users_user" Column | Type | Collation | Nullable | Default -------------+---------+-----------+----------+--------- user_ptr_id | integer | | not null | Indexes: "

Workspace
Collecting workspace information

The users_user table structure looks like this because of Django's model inheritance. In task_manager/users/models.py, the User class inherits from Django's built-in User model using multi-table inheritance.

When using multi-table inheritance in Django:

The child table (users_user) only contains a one-to-one link (user_ptr_id) to the parent table (auth_user)
All the actual user fields (username, email, password, etc.) are stored in the parent auth_user table
The user_ptr_id field is both a primary key and a foreign key that links to the parent table
This is why you only see the user_ptr_id column in the users_user table - it's just storing the relationship to the parent table where all the actual user data lives.

The initial migration file 0001_initial.py shows this relationship being set up with:

- 

Views
General methods
- The dispatch method is defined on Django’s base view classes (like django.views.generic.base.View.dispatch). It receives an HTTP request and then routes it to the appropriate handler method (like get(), post(), etc.) based on the HTTP method of the request.
This method is useful when you want to add functionality (such as permissions checks) that applies to all request methods before delegating to the specific method handlers.

UserPageView
- You're right, the fact that you can register and log in successfully does indicate that the database and authentication are working correctly.

The problem is likely due to how Django handles fields when you inherit from the built-in User model using multi-table inheritance.

When you inherit from django.contrib.auth.models.User like this:

Django creates a one-to-one relationship between your custom User model (task_manager.users.models.User) and the built-in User model (django.contrib.auth.models.User). This means that the actual user data (username, password, email, etc.) is stored in the auth_user table, while your custom users_user table only contains a link (user_ptr_id) to the auth_user table.

However, Django's ListView (which UserPageView inherits from) might not be automatically fetching the data from the auth_user table when you're using your custom User model.

To fix this, you can override the get_queryset method in your UserPageView to explicitly fetch the data from the auth_user table:

-

UserLoginView
- The issue you're encountering with the login view is due to Django's default behavior of redirecting to profile after a successful login, which doesn't exist in your URL patterns.

To fix this, you can override the get_success_url method in your UserLoginView to redirect to a URL that exists in your urls.py, such as the home page or the users page.

Here's how you can modify your UserLoginView in task_manager/users/views.py:
def get_success_url(self):
        return reverse_lazy('home')  # Redirect to the 'home' page after login


Forms
- In the template, {{ field.label }} renders the human-readable label for a form field. In your setup, it's the label associated with the label field (defined in your LabelForm) used in the form.
This label is automatically generated from the field definition in the model or can be explicitly set in the form.


Django templates
- {% for label in task.labels.all %}
    {{ label.label }}{% if not forloop.last %}, {% endif %}
{% endfor %}
This code snippet iterates through all the labels associated with a specific task and displays them as a comma-separated list.

Here's a breakdown:

{% for label in task.labels.all %}: This is a Django template tag that starts a for loop. It iterates over each label in the task.labels.all() queryset. task.labels is a ManyToManyField in the Task model, representing the labels associated with that task. .all() retrieves all the associated Label objects.
{{ label.label }}: This displays the label attribute of the current Label object. In the Label model, the label attribute stores the actual text of the label.
{% if not forloop.last %}, {% endif %}: This is a conditional statement that checks if the current label is the last one in the loop. forloop.last is a special variable available within for loops in Django templates. It's True for the last iteration and False otherwise. If it's not the last label, a comma and a space (, ) are added after the label's text to separate it from the next label.
{% endfor %}: This closes the for loop.
In essence, this code takes all the labels associated with a task and renders them as a string where each label is separated by a comma, except for the last one. For example, if a task has labels "bug", "feature", and "urgent", this code would render: "bug, feature, urgent".


- django_filters
Without setting the filterset_class, the view falls back to returning all tasks from the model's default queryset. This means that typing into the search input (the "q" parameter) will have no effect since the FilterView won't know to process and filter by description or any other field.

Models
Fields
In Django, Many‑to‑many relationships (like Task.labels) aren’t saved until the task instance is created.
That's why you first create the task and then assign to its many‑to‑many field using methods like add() or set().
See this explanation for details.
https://docs.djangoproject.com/en/stable/topics/db/examples/many_to_many/

On line 663 in query.py (or around that area), the create method is defined to insert a new record into the database.
However, Django’s ORM doesn’t handle many‑to‑many fields in that initial insert because many‑to‑many relationships use a separate join table.
An instance must first be saved (thus, getting its primary key) before you can link related objects via a many‑to‑many field.
That's why—you must call methods such as add() after the object is created to update the many‑to‑many relations.

Tests
Database
Django reads your DATABASES setting to establish a connection to the remote DB. When you run tests,
it clones that connection and creates a new test database (typically named by prepending "test_") using the remote DB’s creation commands, provided the remote server allows database creation. This isolates test changes from your production database



